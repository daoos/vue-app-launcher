<template>
<div class="vue-app-launcher"
  @contextmenu="$event.preventDefault()">
  <div class="val-content"
    @mousedown="onContentMousedown"
    @mousemove="onContentMousemove"
    @mouseup="onContentMouseup"
    @touchstart="onContentMousedown"
    @touchmove="onContentMousemove"
    @touchend="onContentMouseup"
    @mousewheel="onContentMousewheel">
    <div class="val-page"
      :class="{ 'no-transition': isDragPage, 'no-pointer': isDragGrid }"
      :style="{
        width: pageWidth * pages.length + 'px',
        transform: 'translate3d(' + (-pageIndex * pageWidth + movePageX) + 'px, 0, 0)'
      }"
      @webkitTransitionEnd="onPageMoveEnd"
      @transitionend="onPageMoveEnd">
      <transition-group
        tag="div"
        class="val-grid-container"
        v-for="(page, j) in pages"
        v-if="((j - pageIndex) < 2 && (j - pageIndex) > -2 && isMovePage) || j === pageIndex"
        v-on:before-enter="onDropGrid"
        :key="j"
        name="val-grid"
        :style="{
          width: pageWidth - paddingLeft - paddingRight + 'px',
          height: pageHeight - paddingTop - paddingBottom + 'px',
          left: paddingLeft + j * pageWidth + 'px',
          top: paddingTop + 'px'
        }">
        <div class="val-grid"
          v-for="grid in pages[j]"
          :key="grid.id"
          :style="{
            width: 1 / colNumber * 100 + '%',
            height: 1 / rowNumber * 100 + '%'
          }"
          @webkitTransitionEnd="isUpdatingGrid=false"
          @transitionend="isUpdatingGrid=false">
          <div
            class="val-grid-content"
            :class="{'val-grid-ctn-hide': moveGrid === grid}"
            :style="{
              width: iconSize + 'px',
              height: iconSize + 26 + 'px',
            }"
            @mousedown="onDragGrid(grid, $event)"
            @touchstart="onDragGrid(grid, $event)">
            <div class="val-icon" :style="{ width: iconSize + 'px', height: iconSize + 'px'}">
              <img class="val-icon-img" :src="grid.icon" draggable="false">
            </div>
            <div class="val-name" :style="{ width: iconSize + 'px' }">{{grid.name}}</div>
          </div>
        </div>
      </transition-group>
    </div>
    <!-- dragging grid -->
    <div
      class="val-grid val-grid-move-item no-pointer"
      v-if="moveGrid"
      :class="{'no-transition': isDragGrid}"
      :style="{
        width: gridWidth + 'px',
        height: gridHeight + 'px',
        left: moveGridX + 'px',
        top: moveGridY + 'px'
      }"
      @transitionend="onGridMoveEnd"
      @webkitTransitionEnd="onGridMoveEnd">
      <div class="val-grid-content no-pointer"
        :style="{width: iconSize + 'px', height: iconSize + 26 + 'px'}"
        :class="{'val-grid-draging': isDragGrid}">
        <div class="val-icon no-pointer" :style="{ width: iconSize + 'px', height: iconSize + 'px'}">
          <img class="val-icon-img no-pointer" :src="moveGrid.icon">
        </div>
        <div class="val-name no-pointer" :style="{ width: iconSize + 'px' }">{{moveGrid.name}}</div>
      </div>
    </div>

  </div>
  <div class="val-pagination" v-if="showPagination">
    <div class="val-pagination-item"
      v-for="(item, i) in pages.length"
      :key="i"
      :class="{'val-pagination-item-on': i === pageIndex}"
    ></div>
  </div>
  <div class="log" style="position: absolute;left: 0;top: 0;font-size: 12px;color: #fff;pointer-events:none;background:rgba(0,0,0,1)">
    <!--  -->
  </div>
</div>
</template>

<script>
import chunk from './utils/chunk'

export default {
  name: 'vue-app-launcher',
  props: {
    data: { type: Array, default: () => [] },
    maxColumn: Number,
    maxRow: Number,
    iconSize: { type: Number, default: 100 },
    density: { type: Number, default: 1.5 },
    paddingLeft: { type: Number, default: 0 },
    paddingRight: { type: Number, default: 0 },
    paddingTop: { type: Number, default: 0 },
    paddingBottom: { type: Number, default: 0 },
    allowNesting: Boolean,
    showPagination: Boolean,
    showGridBorder: Boolean
  },
  data () {
    return {
      pageWidth: 0,
      pageHeight: 0,
      moveGrid: null,
      willDropGrid: null,
      pageIndex: 0,
      elementX: 0,
      elementY: 0,
      pages: [],
      // mouse
      startX: 0,
      startY: 0,
      mouseX: 0,
      mouseY: 0,
      layerX: 0,
      layerY: 0,
      isMousedown: false,
      isDragPage: false,
      isMovePage: false,
      isDragGrid: false,
      isMoveGrid: false,
      isUpdatingGrid: false,
      moveGridToX: 0,
      moveGridToY: 0
    }
  },
  watch: {
    gridCount (count) {
      this.pages = chunk(this.data, count)
    }
  },
  computed: {
    rowNumber () {
      let { pageHeight, paddingTop, paddingBottom, iconSize, maxRow, density } = this
      let rows = (pageHeight - paddingTop - paddingBottom) / (iconSize * density + 26)
      if (maxRow && rows > maxRow) return maxRow
      return Math.round(rows) || 1
    },
    colNumber () {
      let { pageWidth, paddingLeft, paddingRight, iconSize, maxColumn, density } = this
      let cols = (pageWidth - paddingLeft - paddingRight) / (iconSize * density)
      if (maxColumn && cols > maxColumn) return maxColumn
      return Math.round(cols) || 1
    },
    gridWidth () {
      let { pageWidth, paddingLeft, paddingRight, colNumber } = this
      return (pageWidth - paddingLeft - paddingRight) / colNumber
    },
    gridHeight () {
      let { pageHeight, paddingTop, paddingBottom, rowNumber } = this
      return (pageHeight - paddingTop - paddingBottom) / rowNumber
    },
    gridCount () {
      return this.rowNumber * this.colNumber
    },
    moveX () {
      return this.mouseX - this.startX
    },
    moveY () {
      return this.mouseY - this.startY
    },
    movePageX () {
      let { moveX, isDragPage } = this
      if (!isDragPage) return 0
      if ((moveX > 0 && this.pageIndex === 0) || (moveX < 0 && this.pageIndex === this.pages.length - 1)) {
        return moveX / 3
      }
      return moveX
    },
    moveGridX () {
      if (!this.moveGrid) return 0
      if (this.isDragGrid) return this.mouseX - this.layerX
      return this.moveGridToX
    },
    moveGridY () {
      if (!this.moveGrid) return 0
      if (this.isDragGrid) return this.mouseY - this.layerY
      return this.moveGridToY
    }
  },
  mounted () {
    this.onResize()
    window.addEventListener('resize', this.onResize)
  },
  beforeDestroy () {
    window.removeEventListener('resize', this.onResize)
  },
  methods: {
    onResize () {
      this.pageWidth = this.$el.clientWidth
      this.pageHeight = this.$el.clientHeight
      let boundingClientRect = this.$el.getBoundingClientRect()
      this.elementX = boundingClientRect.x
      this.elementY = boundingClientRect.y
      // if (this.pageIndex > this.pages.length - 1) this.pageIndex = this.pages.length - 1
    },
    // bind page events
    onContentMousedown (e) {
      e.preventDefault()
      e = e.touches ? e.touches[0] : e
      this.startX = this.mouseX = e.clientX - this.elementX
      this.startY = this.mouseY = e.clientY - this.elementY
      this.isMousedown = true
    },
    onContentMousemove (e) {
      if (!this.isMousedown) return
      e.preventDefault()
      e = e.touches ? e.touches[0] : e
      this.mouseX = e.clientX - this.elementX
      this.mouseY = e.clientY - this.elementY
      if (this.isDragGrid) {
        this.onDraggingGrid()
        return
      }
      if (this.isDragPage || Math.abs(this.moveX) > 10) {
        this.isDragPage = true
        this.isMovePage = true
      }
    },
    onContentMouseup () {
      this.isMousedown = false
      if (this.isDragPage && Math.abs(this.moveX) > this.pageWidth / 4) {
        if (this.moveX > 0) this.prevPage()
        if (this.moveX < 0) this.nextPage()
      }
      this.isDragPage = false
      if (this.isDragGrid) {
        this.onDropGrid()
      }
      this.isDragGrid = false
      this.mouseX = this.startX = this.layerX = 0
      this.mouseY = this.startY = this.layerY = 0
    },
    onContentMousewheel (e) {
      e.preventDefault()
      if (this.isMovePage) return
      if (e.deltaY > 0) this.nextPage()
      if (e.deltaY < 0) this.prevPage()
    },
    onPageMoveEnd (e) {
      this.isMovePage = false
    },
    prevPage () {
      if (this.pageIndex === 0) return
      this.isMovePage = true
      this.pageIndex -= 1
    },
    nextPage () {
      if (this.pageIndex === this.pages.length - 1) return
      this.isMovePage = true
      this.pageIndex += 1
    },
    // start drag grid
    onDragGrid (grid, e) {
      e.preventDefault()
      this.isMousedown = true
      setTimeout(() => {
        // start drag
        if (this.isMousedown && Math.abs(this.moveX) < 10 && Math.abs(this.moveY) < 10) {
          this.isDragGrid = true
          this.isMoveGrid = true
          this.moveGrid = grid
          let gridMousePosition = this.getGridMousePosition(grid)
          this.layerX = gridMousePosition.x
          this.layerY = gridMousePosition.y
          let moveToPos = this.getGridPosition(grid)
          this.moveGridToX = moveToPos.x
          this.moveGridToY = moveToPos.y
        }
      }, 200)
    },
    onDraggingGrid (grid) {
      if (this.isUpdatingGrid) return
      let { moveGridX, moveGridY, gridWidth, gridHeight, pages, pageIndex } = this
      let gridCenterX = moveGridX + gridWidth / 2 // center x of dragging grid
      let gridCenterY = moveGridY + gridHeight / 2 // center y of ...
      let gridArr = pages[pageIndex]
      let dropGrid = null
      let len = gridArr.length
      for (let i = 0; i < len; i++) {
        let item = gridArr[i]
        let { x, y } = this.getGridPosition(item)
        if (gridCenterX > x && gridCenterX < (x + gridWidth) && gridCenterY > y && gridCenterY < (y + gridHeight)) {
          dropGrid = item
          break
        }
      }
      if (dropGrid && dropGrid !== this.willDropGrid) {
        this.willDropGrid = dropGrid || grid
        setTimeout(() => {
          if (this.willDropGrid === dropGrid) this.updateLayout()
        }, 300)
      }
    },
    onDropGrid () {
      this.willDropGrid = null
      this.isUpdatingGrid = false
    },
    onGridMoveEnd (e) {
      this.isMoveGrid = false
      this.moveGrid = null
    },
    getGridPosition (grid, pageIndex) {
      pageIndex = pageIndex || this.pageIndex
      let { colNumber, gridWidth, gridHeight, paddingLeft, paddingTop } = this
      let page = this.pages[pageIndex]
      let i = page.indexOf(grid)
      return {
        x: (i % colNumber * gridWidth) + paddingLeft,
        y: (~~(i / colNumber) * gridHeight) + paddingTop
      }
    },
    getGridMousePosition (grid) {
      let gridPosition = this.getGridPosition(grid)
      return {
        x: this.mouseX - gridPosition.x,
        y: this.mouseY - gridPosition.y
      }
    },
    updateLayout () {
      if (this.isUpdatingGrid) return
      let { data, moveGrid, willDropGrid, gridCount } = this
      let index1 = data.indexOf(moveGrid)
      let index2 = data.indexOf(willDropGrid)
      if (index1 === index2) return
      this.isUpdatingGrid = true
      let { x, y } = this.getGridPosition(willDropGrid)
      this.moveGridToX = x
      this.moveGridToY = y
      this.data.splice(index1, 1)
      this.data.splice(index2, 0, this.moveGrid)
      this.pages = chunk(this.data, gridCount)
    }
  }
}
</script>

<style lang="less">
.vue-app-launcher{
  position: relative;width: 100%;height: 100%;box-sizing: border-box;
  .val-content, .val-page{position: absolute;width: 100%;height: 100%;overflow: hidden;}
  .val-page{transition: transform .4s cubic-bezier(0.1, 0.4, 0.53, 0.93);}
  .val-grid-container{position: absolute;display: flex;flex-wrap: wrap;align-content: flex-start;}
  .val-grid{display: inline-flex;box-sizing: border-box;
    align-items: center;justify-content: center;color: #fff;transition: none;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  // .val-icon{background: rgba(255, 255, 255, .2);}
  .val-icon-img{width: 100%;}
  .val-name{text-align: center;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;font-size: 14px;height: 26px;line-height: 1em;padding: 6px 0;box-sizing: border-box;}
  .val-pagination{display: flex;align-items: center;justify-content: center;position: absolute;width: 100%;height: 10px;left: 0;bottom: 30px;}
  .val-pagination-item{width: 5px;height: 5px;background: rgba(255, 255, 255, .5);border-radius: 50%;margin: 0 5px;}
  .val-pagination-item-on{background: #fff;}
  .val-grid-content{transition: transform .3s, filter .3s;}
  .val-grid-draging{transform: scale(1.08);filter: brightness(0.7);}
  .val-grid-ctn-hide{opacity: 0.6;}
  .val-grid-move{transition: transform .2s;}
  .val-grid-move-item{position: absolute;transition: all .2s;}
  // .val-move-grid{pointer-events: none;}
  .no-transition{transition: none;}
  .no-pointer{pointer-events: none;}

  .log span{color: rgba(255, 255, 255, .5);}
}
</style>
